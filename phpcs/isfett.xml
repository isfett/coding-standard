<?xml version="1.0"?>
<ruleset name="Isfett">
    <description>The Isfett phpcs coding standard.</description>

    <!-- There should not be any code in the bundle Resources directory. -->
    <exclude-pattern>*/Resources/*</exclude-pattern>

    <config name="installed_paths" value="../slevomat/coding-standard" />

    <!-- Standard follows the standards defined in the PSR-0, PSR-1 and PSR-2 documents. -->

    <!-- Include the whole PSR-1 standard -->
    <rule ref="PSR1"/>
    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2"/>
    <!--

    See the [documented coding standard](http://symfony.com/doc/current/contributing/code/standards.html)
    -->

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing"/>
    <!-- added by christopher.stenke -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found"/>

    <!-- We provide our own subclass of PEAR's ClassComment and FunctionComment sniff, but these will do: -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- covered by Squiz FunctionDeclarationSniff -->
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/>

        <!-- added by christopher.stenke -->
        <exclude name="Zend.NamingConventions.ValidVariableName.MemberVarContainsNumbers"/>
    </rule>

    <rule ref="Symfony/ruleset.xml">
        <exclude name="Symfony.Commenting.License"/>
        <exclude name="Symfony.Commenting.Annotations.Invalid"/>
        <!-- @see https://github.com/djoos/Symfony-coding-standard/issues/120 -->
        <exclude name="Symfony.Functions.ReturnType.Invalid"/>
        <!-- @see https://github.com/djoos/Symfony-coding-standard/issues/27 -->
        <exclude name="PEAR.Functions.FunctionCallSignature"/>
        <!-- @see https://github.com/djoos/Symfony-coding-standard/issues/44 -->
        <exclude name="Squiz.Strings.ConcatenationSpacing"/>
        <!-- @see https://github.com/djoos/Symfony-coding-standard/issues/122 -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.ContentAfterBrace"/>
        <exclude name="Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore"/>
        <exclude name="PEAR.WhiteSpace.ScopeClosingBrace.Line"/>
        <exclude name="Symfony.Formatting.BlankLineBeforeReturn.Invalid"/>

        <exclude name="Symfony.Functions.Arguments.Invalid"/>
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.Missing">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.Missing">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.Blacklisted">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingReturn">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.SpacingBeforeTags">
        <message>There should always be a description, followed by a blank line, before the tags of a class comment.</message>
    </rule>

    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                    <element value="@author" />
                    <element value="@created" />
                    <element value="@version" />
                    <element value="@package" />
                    <element value="@copyright" />
                    <element value="@license" />
            </property>
        </properties>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.SpacingAfterParamType" />
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <properties>
            <property name="allAnnotationsAreUseful" value="true" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax" />
    <!-- Ignore traversable return type declarations -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversablePropertyTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.UselessDocComment">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint" />
    <rule ref="SlevomatCodingStandard.PHP.TypeCast" />
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1" />
            <property name="linesCountBetweenDifferentAnnotationsTypes" value="1" />
            <property name="linesCountBetweenAnnotationsGroups" value="1" />
            <property name="annotationsGroups" type="array">
                <element value="
                    @example,
                "/>
                <element value="
                    @var,
                    @param,
                "/>
                <element value="
                    @ORM\,
                    @Assert\,
                    @CustomAssert\,
                    @MongoDB\,
                    @Serializer\,
                "/>
                <element value="
                    @return,
                    @throws,
                "/>
                <element value="
                    @deprecated,
                "/>
                <element value="
                    @dataProvider,
                "/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing.IncorrectAnnotationsGroup">
        <message>Group annotations by sort. Annotation-Groups are {@example}, {@param, @var}, {@ORM\, @Serializer\, @MongoDB\, @Assert\, @CustomAssert\}, {@return, @throws}, {@deprecated} and {@dataProvider}. They should be seperated by a single blank line.</message>
    </rule>

    <!-- soft line limit 80, hard 120 -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="80"/>
            <property name="absoluteLineLimit" value="120"/>
        </properties>
    </rule>

    <!-- 7.0 -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountAfterDeclare" value="2" />
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="1" />
            <property name="spacesCountAroundEqualsSign" value="1" />
        </properties>
    </rule>

    <!-- 7.1 -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
</ruleset>
